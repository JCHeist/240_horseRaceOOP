HorseRaceOOP.cpp

GOALS: Race 5 horces 15 spaces and print the winner


INPUT: enter button to run each turn


OUTPUT: print track of each horse each turn and print winner when there is one





__________________________Classes___________________________

Horse(){

-private position variable to store position of horse


-constructor for horse
	+sets variable for position to e 0;

advance(){
	
	GOALS: add a one or zero to position determined by a random coin flip

	INPUT: none

	OUTPUT: none

	STEPS:
	
	1)coinFlip(){

		GOALS: get a random number and if that is odd, return a 1 if it is even return a 0 


		INPUT: none


		OUTPUT: 0 or 1 

		STEPS:
		
			1. determine a random value of 1 or 0 (possibly [rand() %2])

			2. Return value

	}

	2)add result of coinFlip() to position to determine if the horse advances or not
}

getPosition(){

	GOALS: get the position of the horse (getter)

	INPUT: none

	OUTPUT: position of horse

	STEPS: 
		
		1) return position(private)
}

}


Race(){

-private array to store the horses that are racing
-private int length of track

	Race(){
		GOALS: construct default values for for a race

		INPUT: null

		OUTPUT:none
	
		STEPS:
			1) assign default value to length of 15

			2)add 5 horses to the private horse arrray
	}

	Race(int length){

		GOALS:create race object 

		INPUT: integer

		OUTPUT:none
		
		STEPS:

			1)assign input value of an int to be length of the race

			2)add 5 Horses to private array
		

	}

	void printLane(int horseNumber){

		
		GOALS: Print the track of one horse


		INPUT: horses track to print and current position of that horse


		OUTPUT: print track of particular horse

		STEPS:


			1) look at horse given

			2) print "." if horse is not there, i if horse is in that spot. in the spot of the value of horses[i]

			3) if horse is past space 14
				a. say this horse wins 
				b. set keepGoing to false so the while loop in main stops running.



	}



	void start() {
	1)set random seed to be bassed on current time

	2)Go through each horse and print the lane of each horse

	3)Ask user to advance turn if race is still going by pressing enter. If the race is not still going press enter to end the race.


}









Steps:

main()

Create race and start the race.
____________________________________________
BLACKBELT
______________________________________________

these plans did not come to fruition. file does not run



record()  (RAN OUT OF TIME TO IMPLEMENT){

GOALS: Save wins and races of horses in the race

INPUT: array of horses, showing who raced, and winning horse

OUTPUT: Updated records.csv

STEPS:

1)add a win to the number of wins to the horse that won

2)add a race to all horces who raced

3)write and save file

}

menu(){

GOALS: Let user decide what to do

INPUT: a 1 to race, a 2 to see all horse stats, a 3 to quit the game

OUTPUT: will call race or will call stats or wuit game

STEPS:

1) check to make sure input is a 1,2, or 3

2) call race if 1 is entered, call stats if 2 is entered, quit program if 3 is entered. if not understood as one of these ask for input again


}

stats(){

GOALS: Display current stats of all 10 horses in stables

INPUT: records.csv file

OUTPUT:	orderly stats page

STEPS:

1)open file

2) Go through all items for horse 1 and assign them to a struct

3) Go through all horses printing off their stats

}

int selectHorse(){

GOALS: Get the user to select an int in the rancge of 0-9

INPUT: pointer to array of the five selected horses

OUTPUT: Int of a horse available to race in the race

STEPS:

1)ask for user input

2)check to make sure it is an int

3)make sure int is in between 0 and 9

4)make sure this integer horse number is not already selectd be seeing if it is not in the selected horse array

5)return int
}
